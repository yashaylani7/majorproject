# -*- coding: utf-8 -*-
from PIL import Image
# Form implementation generated from reading ui file '.\imgWidget.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *


class MyButton(QPushButton):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumSize(QSize(200, 40))
        self.setMaximumSize(QSize(200, 40))
        self.setObjectName("pushButton")

        # specify requirement for drag and drop
        self.dragStartPos = QPoint()
        self.dragging = False
        self.setAutoFillBackground(True)

    # how it'll act when we press/move/release mouse button
    # to drag and drop element on screen
    def mousePressEvent(self, event):
        if event.button() == Qt.RightButton:
            self.dragStartPos = event.pos()
            self.dragging = True
            print(self.dragStartPos)
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.dragging:
            diff = event.pos() - self.dragStartPos
            self.move(self.pos() + diff)
        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.RightButton:
            print(self.x(), self.y())
            self.dragging = False
        else:
            super().mouseReleaseEvent(event)


class MyLabel(QLabel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumSize(QSize(600, 500))
        self.setMaximumSize(QSize(600, 500))
        self.setStyleSheet("border: 2px solid red;")
        self.setPixmap(QPixmap("D:/PICTURES/EID.jpg"))
        self.setObjectName("label")

        # specify requirement for drag and drop
        self.dragStartPos = QPoint()
        self.dragging = False
        self.setAutoFillBackground(True)

    # how it'll act when we press/move/release mouse button
    # to drag and drop element on screen
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.dragStartPos = event.pos()
            self.dragging = True
            print(self.dragStartPos)
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.dragging:
            diff = event.pos() - self.dragStartPos
            self.move(self.pos() + diff)
        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            print(self.x(), self.y())
            self.dragging = False
        else:
            super().mouseReleaseEvent(event)


class Ui_Form(object):

    def setupUi(self, Form):

        # autogenerated codes
        Form.setObjectName("Form")
        Form.resize(700, 400)
        Form.setMinimumSize(QSize(820, 500))
        self.horizontalLayout = QHBoxLayout(Form)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = MyLabel(Form)  # to apply drag and drop effect we made a seperate button class
        self.horizontalLayout.addWidget(self.label)
        self.pushButton = MyButton(Form)  # to apply drag and drop effect we made a seperate button class
        self.horizontalLayout.addWidget(self.pushButton)
        self.retranslateUi(Form)
        QMetaObject.connectSlotsByName(Form)

        # my code starts here!
        self.pushButton.clicked.connect(self.addImage)
        self.pushButton.setAcceptDrops(True)
        self.pushButton.dragging = False
        self.pushButton.draggingStartPos = QPoint()

        # img button
        self.label.btnDragStartPos = QPoint()
        self.label.dragging = False

    def addImage(self):
        openFile = QFileDialog()

        fileName = openFile.getOpenFileName()[0]

        if fileName is None:
            print("No File Selected")
            return

        # check image extension
        extension = fileName.split('.')[1]

        if extension == 'gif':
            # set qmovie as label
            self.movie = QMovie(fileName)
            self.movie.setScaledSize(QSize().scaled(600, 500, Qt.IgnoreAspectRatio))
            self.label.setMovie(self.movie)
            self.movie.start()
        else:

            self.qtimg = QPixmap(fileName)

            # TODO: Currently we're resizing the image to fit the frame
            # But our plane is to resize the frame so that any image fit according to it's size
            print(self.qtimg.rect())
            # self.label.setMinimumSize(QSize(800, 500))
            self.qtimg = self.qtimg.scaled(600, 500)
            self.label.setPixmap(self.qtimg)
            print(fileName)

        # my code ends here!
    def retranslateUi(self, Form):
        _translate = QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Add Images"))


# if __name__ == "__main__":
#     import sys
#
#     app = QApplication(sys.argv)
#     Form = QWidget()
#     ui = Ui_Form()
#     ui.setupUi(Form)
#     Form.show()
#     sys.exit(app.exec_())
